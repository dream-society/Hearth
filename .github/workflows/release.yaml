name: New Release üöÄ

on:
  push:
    tags:
      - '*'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  checkLicense:
    name: Check for the Unity license ‚òëÔ∏è
    runs-on: ubuntu-latest
    steps:
      - name: Fail - No license ‚ò†Ô∏è
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1

  testRunner:
    needs: checkLicense
    name: Test all modes üìù
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-test-project
          restore-keys: |
            Library-test-project-
            Library-

      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v2
        with:
          name: Test results (${{ matrix.testMode }})
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  buildAllPlatforms:
    needs: testRunner
    name: Build for ${{ matrix.targetPlatform }} üñ•Ô∏è
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows64
          - StandaloneLinux64
          - WebGL
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-build-
            Library-

      - name: Build project
        uses: game-ci/unity-builder@v2
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Semantic

      - uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

      - name: Zip build/${{ matrix.targetPlatform }}
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r build/${{ matrix.targetPlatform }}.zip build/${{ matrix.targetPlatform }}

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Release ${{ matrix.targetPlatform }}
        uses: softprops/action-gh-release@v1
        with:
          files: build/${{ matrix.targetPlatform }}.zip
          name: Release ${{ steps.get_version.outputs.version }}
